%{
#include "defs.h"
#define YYSTYPE Cell *
%}
%token  ID INTEGER REAL TILDE VERTICAL NEWLINE MULTIPLY DIVIDE PRINT STRINGS
        ADD SUBTRACT LPAR RPAR UNKNOWN;
%%

Program
        : Statements                            { $$ = $1; }
Statements
        : StatementNewline                             { $$ = $1; tree($$); }
        | Statements StatementNewline                  { $$ = $2; tree($$); }
StatementNewline
        : Statement                       { $$ = $1;}
        | Newlines Statement             { $$ = $2;}
Statement
        : Assign Newlines                     { $$ = $1; }
        | Method Newlines                     { $$ = $1;}
Assign
        : Variable TILDE VERTICAL Expression VERTICAL { $$ = node("=", cons($1, $4)); }
Method
        : Print                                { $$ = $1;}
Print
        : PRINT LPAR Expression RPAR            { $$ = node("Print", $3); }
Expression
        : Expression ADD Term                   { $$ = node("+", cons($1, $3)); }
        | Expression SUBTRACT Term              { $$ = node("-", cons($1, $3)); }
        | Term                                  { $$ = $1; }
Term
        : Factor                                { $$ = $1; }
Factor
        : Variable                              { $$ = $1; }
        | Constant                              { $$ = $1; }
        | LPAR Expression RPAR                  { $$ = $2; }
     
Variable
        : ID                                    { $$ = leaf("ID", yytext); }
Constant
        : INTEGER                               { $$ = leaf("INTEGER", yytext); }
        | REAL                                  { $$ = leaf("REAL", yytext); }
        | STRINGS                               { $$ = leaf("STRINGS", yytext); }
Newlines
        : NEWLINE               {}
        | Newlines NEWLINE       {}
%%
#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "\n%s at %d: nearby \"%s\"\n\n", s, linecounter, yytext);
	exit(EXIT_FAILURE);
}
